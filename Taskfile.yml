# https://taskfile.dev

version: '3'

vars:
  # Clients
  CLIENTS: ["go", "js"]
  CLIENTS_PATH: ["./crypto-broker-client-go/cli/bin/go-client-cli", "node crypto-broker-client-js/dist/cli.js"]
  # Here are the Known-Answer-Tests for the following text (without quotes): "Welcome CryptoBroker"
  KAT:
    map: {
      KAT_SHA256:
        4a9f3b5a0ad21b75c5cd6ed018167ad9771ad2662756e26f0437c9c7a7cee27a,
      KAT_SHA384:
        b4bba0f7db27f690f11f795f969a539cbf1eee03282979ec1c341a73d66f2316bd180bf8bc1c1fe73cb7684e6073c079,
      KAT_SHA512:
        0d1d495b4dd049d07274d3e4b490dd24136315d4d8bfd83208b48213a0cd57cfa3b2ca3ab2f66cba900de28a5d4ddc4c56d116f518f2a12503c8a9bbe378577a,
      KAT_SHA3_256:
        dbb1a7578253838e60705e19f7f3efc384320515b1398ce7358c12307077c0fe,
      KAT_SHA3_384:
        dfeb2499281d6fd2bf5c6b85d20602d82303b66ad5b6464e68fe680ca67360c317a5c4514c3f5365c71cd557144397e6,
      KAT_SHA3_512:
        14894112f30f982c01e1de386ee9ca60bff70469d9fd249a5f9fbfc66a29c37c76b3fb15c294a6b6d3a1609fa59ca14194e2bc9da16610fa7f1a10dad38d628e,
      }
  # Variables for the SignCertificate tests
  SIGN_ALGO: ["ecdsa", "rsa"]
  HASH_ALGO: ["sha256", "sha384", "sha512"]
  GREP_CMD:
    sh: |
      case "$(uname)" in
        Darwin*) echo ggrep ;;
        *) echo grep ;;
      esac

tasks:
  ################# Build Crypto Broker Client ####################
  # Public build task for the clients.
  # At first, an already existing cloned repo will be deleted.
  # Then the repo will be cloned and the submodules initialized.
  # After that the client will be build, language specific tasks are executed.
  build-client:
    desc: "Build a client depending on the CLI argument with CLIENT='', values: 'go', 'js'. Also the branch can be specified with BRANCH='', values: 'main' (default), 'dev'. The OS and ARCH can also be specified."
    vars:
      BRANCH: '{{.BRANCH | default "main"}}'
      OS: '{{.OS | default "linux"}}'
      ARCH: '{{.ARCH | default "amd64"}}'
    requires:
      vars:
        - name: CLIENT
          enum: [go, js]
    cmds:
      - echo "Building {{.CLIENT}} client from branch '{{.BRANCH}}'"
      - task: delete-client
        vars:
          CLIENT: '{{.CLIENT}}'
      - task: clone-client
        vars:
          CLIENT: '{{.CLIENT}}'
          BRANCH: '{{.BRANCH}}'
      - task: build-client-{{.CLIENT}}
        vars:
          OS: '{{.OS}}'
          ARCH: '{{.ARCH}}'

  # Delete the specified client
  delete-client:
    desc: "Delete client source folder depending on the CLI argument with CLIENT='', values: 'go', 'js'"
    requires:
      vars:
        - name: CLIENT
          enum: [go, js]
    cmds:
      - rm -rf crypto-broker-client-{{.CLIENT}}

  # Internal tasks for building specified client
  clone-client:
    internal: true
    desc: "Clone client repository"
    cmds:
      # clone the client using a specific branch
      - git clone -b {{.BRANCH}} --single-branch https://github.com/open-crypto-broker/crypto-broker-client-{{.CLIENT}}.git
      # initialize protobuf submodule
      - |
       cd crypto-broker-client-{{.CLIENT}}/protobuf
       git submodule update --init

  build-client-go:
    internal: true
    dir: crypto-broker-client-go/cli
    cmds:
      - GOOS={{.OS}} GOARCH={{.ARCH}} go build -o ./bin/go-client-cli cmd/client-cli/client-cli.go

  build-client-js:
    internal: true
    dir: crypto-broker-client-js/
    cmds:
      - npm install

  # Internal tasks for installing/removing GNU Grep on MacOS
  install-gnu-grep:
    internal: true
    preconditions:
      - test "$(uname)" = "Darwin"
    cmds:
      - brew install grep
   
  remove-gnu-grep:
    internal: true
    preconditions:
      - test "$(uname)" = "Darwin"
    cmds:
      - brew uninstall grep   

  ################# Build Crypto Broker Server ####################
  # Public build task for Crypto Broker server.
  # At first delete the source folder if it exists.
  # Then the repo will be cloned and the submodules initialized.
  # After that the Crypto Broker will be build.
  build-crypto-broker-server:
    desc: "Clone and build Crypto Broker server. The branch can be specified with BRANCH='', values: 'main' (default), 'dev'. The OS and ARCH can also be specified."
    vars:
      BRANCH: '{{.BRANCH | default "main"}}'
      OS: '{{.OS | default "linux"}}'
      ARCH: '{{.ARCH | default "amd64"}}'
    cmds:
      - task: delete-crypto-broker-server
      - task: clone-crypto-broker-server
        vars:
          BRANCH: '{{.BRANCH}}'
      - task: build-crypto-broker-server-internal
        vars:
          OS: '{{.OS}}'
          ARCH: '{{.ARCH}}'

  delete-crypto-broker-server:
    desc: "Delete Crypto Broker server source folder"
    cmds:
      - rm -rf crypto-broker-server

  # Internal tasks for building Crypto Broker server
  clone-crypto-broker-server:
    desc: "Clone Crypto Broker server"
    internal: true
    cmds:
      - git clone -b {{.BRANCH}} --single-branch https://github.com/open-crypto-broker/crypto-broker-server.git
      - task: init-protobuf-crypto-broker-server

  init-protobuf-crypto-broker-server:
    internal: true
    dir: crypto-broker-server/protobuf
    cmds:
      - git submodule update --init

  build-crypto-broker-server-internal:
    internal: true
    status:
      - test -d crypto-broker-server
    dir: crypto-broker-server
    cmds:
      - GOOS={{.OS}} GOARCH={{.ARCH}} go build -o bin/cryptobroker-server cmd/server/server.go

  ################# Cleanup Tasks ####################
  delete-all:
    desc: "Delete the Crypto Broker server and client source folders, the deployment folders, and also the deployment on Cloud Foundry"
    vars:
      ref: .CLIENTS
    cmds:
      - task: delete-crypto-broker-server
      - for: { var: CLIENTS }
        task: delete-client
        vars:
          CLIENT: '{{.ITEM}}'
      - for: { var: CLIENTS }
        task: delete-cf-deployment
        vars:
          CLIENT: '{{.ITEM}}'

  ################# End-to-End Tests ####################
  # Public tasks for testing
  test-hash-clients:
    desc: "Build, run and perform hashing tests for all clients. A branch can be specified with BRANCH='', values: 'main' (default), 'dev'"
    vars:
      BRANCH: '{{.BRANCH | default "main"}}'
      OS: '{{.OS | default "linux"}}'
      ARCH: '{{.ARCH | default "amd64"}}'
    cmds:
      - task: build-dependencies
        vars:
          BRANCH: '{{.BRANCH}}'
          OS: '{{.OS}}'
          ARCH: '{{.ARCH}}'
      - task: start-crypto-broker-server
      - defer: { task: stop-crypto-broker-server }
      - task: install-gnu-grep
      - defer: { task: remove-gnu-grep }
      - task: test-hashing-clients

  test-sign-clients:
    desc: "Build, run and perform signing tests for all clients. A branch can be specified with BRANCH='', values: 'main' (default), 'dev'"
    vars:
      BRANCH: '{{.BRANCH | default "main"}}'
      OS: '{{.OS | default "linux"}}'
      ARCH: '{{.ARCH | default "amd64"}}'
    cmds:
      - task: build-dependencies
        vars:
          BRANCH: '{{.BRANCH}}'
          OS: '{{.OS}}'
          ARCH: '{{.ARCH}}'
      - task: start-crypto-broker-server
      - defer: { task: stop-crypto-broker-server }
      - task: install-gnu-grep
      - defer: { task: remove-gnu-grep }
      - task: test-sign-certificate-clients

  test-clients:
    desc: "Combine all tests for all clients in one task. A branch can be specified with BRANCH='', values: 'main' (default), 'dev'"
    vars:
      BRANCH: '{{.BRANCH | default "main"}}'
      OS: '{{.OS | default "linux"}}'
      ARCH: '{{.ARCH | default "amd64"}}'
    cmds:
      - task: build-dependencies
        vars:
          BRANCH: '{{.BRANCH}}'
          OS: '{{.OS}}'
          ARCH: '{{.ARCH}}'
      - task: start-crypto-broker-server
      - defer: { task: stop-crypto-broker-server }
      - task: install-gnu-grep
      - defer: { task: remove-gnu-grep }
      - task: test-hashing-clients
      - task: test-sign-certificate-clients

  # Internal tasks for end-to-end tests
  # Build Crypto Broker server and the clients for end-to-end tests
  build-dependencies:
    desc: "Build all dependencies: clients and server, depending on the specified branch"
    internal: true
    vars:
      ref: .CLIENTS
    cmds:
      - task: build-crypto-broker-server
        vars:
          BRANCH: '{{.BRANCH}}'
          OS: '{{.OS}}'
          ARCH: '{{.ARCH}}'
      - for: { var: CLIENTS }
        task: build-client
        vars:
          CLIENT: '{{.ITEM}}'
          BRANCH: '{{.BRANCH}}'
          OS: '{{.OS}}'
          ARCH: '{{.ARCH}}'

  # Start/Stop Crypto Broker server
  start-crypto-broker-server:
    desc: "Start the Crypto Broker Server with a custom test profile"
    internal: true
    cmds:
      - CRYPTO_BROKER_PROFILES_DIR=$PWD/testing/profiles ./crypto-broker-server/bin/cryptobroker-server &

  stop-crypto-broker-server:
    desc: "Stop the Crypto Broker Server after all tests were executed"
    internal: true
    cmds:
      - kill $(ps -e | awk '/cryptobroker/ {print $1}')

  delete-tmp-folder:
    desc: "Delete temporary test folder"
    internal: true
    cmds:
      - rm -rf tmp/

  # Hashing tests from the clients
  test-hashing-clients:
    desc: "Iterate hashing tests over all clients"
    internal: true
    vars:
      ref: .CLIENTS_PATH
    cmds:
      - for: { var: CLIENTS_PATH }
        task: test-hashing-KATs
        vars:
          CLIENT_PATH: '{{.ITEM}}'

  test-hashing-KATs:
    desc: "Iterate over all hashing KATs"
    internal: true
    vars:
      ref: .KAT
    cmds:
      - for: { var: KAT }
        cmd:
          |
          echo "Test {{.KEY}}"
          HASH_RESPONSE=$({{.CLIENT_PATH}} --profile={{.KEY}} hash "Welcome CryptoBroker" | {{.GREP_CMD}} -oP '\"hashValue\":\s?"\K[^"]+')
          if [[ $HASH_RESPONSE != {{.ITEM}} ]] then
            echo "Error: Hash values do not match!"
            exit 1
          fi

  # Sign certificate tests from the clients
  test-sign-certificate-clients:
    desc: "Iterate signing tests over all clients"
    internal: true
    vars:
      ref: .CLIENTS_PATH
    cmds:
      - defer: { task: delete-tmp-folder }
      - for: { var: CLIENTS_PATH }
        task: test-sign-certificate
        vars:
          CLIENT_PATH: '{{.ITEM}}'
      - for: { var: CLIENTS_PATH }
        task: test-sign-certificate-validity
        vars:
          CLIENT_PATH: '{{.ITEM}}'
      - for: { var: CLIENTS_PATH }
        task: test-sign-certificate-custom-subject
        vars:
          CLIENT_PATH: '{{.ITEM}}'

  test-sign-certificate:
    desc: "Iterate over ECDSA/RSA with SHA2 algorithms"
    internal: true
    cmds:
      - for:
          matrix:
            SIGN_ALGO:
              ref: .SIGN_ALGO
            HASH_ALGO:
              ref: .HASH_ALGO
        cmd:
          |
          echo "Test {{.ITEM.SIGN_ALGO}}-{{.ITEM.HASH_ALGO}}"
          TMP_DIR=tmp/certificate-responses/{{.ITEM.SIGN_ALGO}}-{{.ITEM.HASH_ALGO}}
          TEST_CA_DIR=testing/certificates/test-ca
          TEST_CSR_DIR=testing/certificates/test-csr
          mkdir -p $TMP_DIR
          SIGNED_CERTIFICATE=$({{.CLIENT_PATH}} --profile=sign-certificate-{{.ITEM.SIGN_ALGO}}-{{.ITEM.HASH_ALGO}} sign $TEST_CSR_DIR/ecdsa_256.csr $TEST_CA_DIR/root-CA-{{.ITEM.SIGN_ALGO}}.pem $TEST_CA_DIR/root-CA-{{.ITEM.SIGN_ALGO}}-private-key.pem | {{.GREP_CMD}} -oP '\"signedCertificate\":\s?"\K[^"]+')
          printf "$SIGNED_CERTIFICATE" > $TMP_DIR/tmp-cert-response-{{.ITEM.SIGN_ALGO}}-{{.ITEM.HASH_ALGO}}.pem
          openssl x509 -inform PEM -in $TMP_DIR/tmp-cert-response-{{.ITEM.SIGN_ALGO}}-{{.ITEM.HASH_ALGO}}.pem -text

  test-sign-certificate-validity:
    desc: "Test profile with different validities"
    internal: true
    cmds:
      - |
        echo "Test different validities"
        TMP_DIR=tmp/certificate-responses/validities
        TEST_CA_DIR=testing/certificates/test-ca
        TEST_CSR_DIR=testing/certificates/test-csr
        mkdir -p $TMP_DIR
        SIGNED_CERTIFICATE=$({{.CLIENT_PATH}} --profile=sign-certificate-validities sign $TEST_CSR_DIR/ecdsa_256.csr $TEST_CA_DIR/root-CA-ecdsa.pem $TEST_CA_DIR/root-CA-ecdsa-private-key.pem | {{.GREP_CMD}} -oP '\"signedCertificate\":\s?"\K[^"]+')
        printf "$SIGNED_CERTIFICATE" > $TMP_DIR/tmp-cert-response-validity.pem
        openssl x509 -inform PEM -in $TMP_DIR/tmp-cert-response-validity.pem -text

  test-sign-certificate-custom-subject:
    desc: "Test custom subject with CLI API"
    internal: true
    cmds:
      - |
        echo "Test custom subject with CLI API"
        TMP_DIR=tmp/certificate-responses/validities
        TEST_CA_DIR=testing/certificates/test-ca
        TEST_CSR_DIR=testing/certificates/test-csr
        mkdir -p $TMP_DIR
        SIGNED_CERTIFICATE=$({{.CLIENT_PATH}} --profile=sign-certificate-ecdsa-sha256 sign $TEST_CSR_DIR/ecdsa_256.csr $TEST_CA_DIR/root-CA-ecdsa.pem $TEST_CA_DIR/root-CA-ecdsa-private-key.pem --subject="C=DE, O=Test Org, OU=Test Certificate Service, OU=Dev, OU=Staging-certificate-service, L=test, CN=test" | {{.GREP_CMD}} -oP '\"signedCertificate\":\s?"\K[^"]+')
        printf "$SIGNED_CERTIFICATE" > $TMP_DIR/tmp-cert-custom-subject.pem
        openssl x509 -inform PEM -in $TMP_DIR/tmp-cert-custom-subject.pem -text

  ################# Cloud Foundry Deployment ####################
  # Public tasks for Cloud Foundry deployment
  # The deployment is done over several stages.
  # First, the old deployment folder is deleted.
  # Second, the Crypto Broker server is build.
  # Third, the specified client is build.
  # Fourth, the deployment repo is created.
  # Fifth, the necessary files from the Crypto Broker are copied to the deployment folder.
  # Sixth, the necessary files from the client are copied to the deployment folder.
  # Seventh, the cf CLI is invoked and the app is pushed to Cloud Foundry.
  deploy-cf-cryptobroker:
    desc: "Deploy to Cloud Foundry the Crypto Broker server and client specified with CLIENT='', values are 'go', 'js'. A branch can be specified with BRANCH='', values: 'main' (default), 'dev'"
    vars:
      BRANCH: '{{.BRANCH | default "main"}}'
    requires:
      vars:
        - name: CLIENT
          enum: [go, js]
    cmds:
      - task: delete-deployment-folder
        vars:
          CLIENT: '{{.CLIENT}}'
      - task: build-crypto-broker-server
        vars:
          BRANCH: '{{.BRANCH}}'
      - task: build-client
        vars:
          CLIENT: '{{.CLIENT}}'
          BRANCH: '{{.BRANCH}}'
      - task: create-deployment-folder
        vars:
          CLIENT: '{{.CLIENT}}'
      - task: copy-crypto-broker-server
        vars:
          CLIENT: '{{.CLIENT}}'
      - task: copy-{{.CLIENT}}-client
      - cf push --random-route -f deployments/cloud-foundry/{{.CLIENT}}/manifest.yaml -p deployments/cloud-foundry/{{.CLIENT}}/{{.CLIENT}}-deployment/

  delete-cf-deployment:
    desc: "Delete the deployment folders and also on Cloud Foundry the deployment of Crypto Broker server and the specified client with CLIENT='', values are 'go', 'js'"
    requires:
      vars:
        - name: CLIENT
          enum: [go, js]
    cmds:
        - task: delete-deployment-folder
          vars:
            CLIENT: '{{.CLIENT}}'
        - cf delete -r -f crypto-broker-{{.CLIENT}}-client

  # Internal tasks for deployment to Cloud Foundry
  create-deployment-folder:
    desc: "Create the deployment folder for Cloud Foundry"
    internal: true
    cmds:
      - mkdir deployments/cloud-foundry/{{.CLIENT}}/{{.CLIENT}}-deployment

  delete-deployment-folder:
    desc: "Delete the deployment folder for Cloud Foundry"
    internal: true
    cmds:
      - rm -rf deployments/cloud-foundry/{{.CLIENT}}/{{.CLIENT}}-deployment

  copy-crypto-broker-server:
    desc: "Copy Crypto Broker server files to deployment folder"
    internal: true
    cmds:
      - cp crypto-broker-server/bin/cryptobroker-server deployments/cloud-foundry/{{.CLIENT}}/{{.CLIENT}}-deployment/
      - cp testing/profiles/Profiles.yaml deployments/cloud-foundry/{{.CLIENT}}/{{.CLIENT}}-deployment/

  # Go specific task
  copy-go-client:
    desc: "Copy the necessary Go client files for Cloud Foundry deployment"
    internal: true
    cmds:
      - cp crypto-broker-client-go/cli/bin/go-client-cli deployments/cloud-foundry/go/go-deployment

  # Node.js specific tasks
  copy-js-client:
    desc: "Copy the necessary Node.js client files for Cloud Foundry deployment"
    internal: true
    cmds:
      - cp crypto-broker-client-js/package*.json deployments/cloud-foundry/js/js-deployment/
      - cp -r crypto-broker-client-js/dist deployments/cloud-foundry/js/js-deployment/
      - task: init-node-modules

  init-node-modules:
    internal: true
    dir: deployments/cloud-foundry/js/js-deployment
    cmds:
      - npm ci --omit=dev --ignore-scripts

  ################# Kubernetes Deployment ####################
  kube-deploy:
    desc: "Deploys the Kubernetes Crypto Broker. It requires a .env local file with the repository's credentials"
    aliases: [deploy]
    dotenv: ['.env']
    preconditions:
      - test -f .env
    cmds:
      - helm upgrade --install broker ./deployments/k8s/kube-broker/ --namespace crypto-broker --create-namespace --force --set imageCredentials.username=$DOCKER_USERNAME --set imageCredentials.password=$DOCKER_PASSWORD --set imageCredentials.email=$DOCKER_EMAIL

  kube-destroy:
    desc: "Destroys the Kubernetes Crypto Broker deployment"
    dotenv: ['.env']
    aliases: [destroy]
    cmds:
      - helm uninstall broker -n crypto-broker
