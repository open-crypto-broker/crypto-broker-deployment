# https://taskfile.dev

version: '3'

vars:
  # Clients
  CLIENTS: ["go", "js"]
  CLIENTS_PATH: ["./crypto-broker-client-go/cli/bin/go-client-cli", "node crypto-broker-client-js/dist/cli.js"]
  # Here are the Known-Answer-Tests for the following text (without quotes): "Welcome CryptoBroker"
  KAT:
    map: {
      KAT_SHA256:
        4a9f3b5a0ad21b75c5cd6ed018167ad9771ad2662756e26f0437c9c7a7cee27a,
      KAT_SHA384:
        b4bba0f7db27f690f11f795f969a539cbf1eee03282979ec1c341a73d66f2316bd180bf8bc1c1fe73cb7684e6073c079,
      KAT_SHA512:
        0d1d495b4dd049d07274d3e4b490dd24136315d4d8bfd83208b48213a0cd57cfa3b2ca3ab2f66cba900de28a5d4ddc4c56d116f518f2a12503c8a9bbe378577a,
      KAT_SHA3_256:
        dbb1a7578253838e60705e19f7f3efc384320515b1398ce7358c12307077c0fe,
      KAT_SHA3_384:
        dfeb2499281d6fd2bf5c6b85d20602d82303b66ad5b6464e68fe680ca67360c317a5c4514c3f5365c71cd557144397e6,
      KAT_SHA3_512:
        14894112f30f982c01e1de386ee9ca60bff70469d9fd249a5f9fbfc66a29c37c76b3fb15c294a6b6d3a1609fa59ca14194e2bc9da16610fa7f1a10dad38d628e,
      }
  # Variables for the SignCertificate tests
  SIGN_ALGO: ["ecdsa", "rsa"]
  HASH_ALGO: ["sha256", "sha384", "sha512"]

tasks:
  ################# Build Crypto Broker Client ####################
  build-client:
    desc: "Build a client depending on the CLI argument with CLIENT='', values: 'go', 'js'"
    requires:
      vars:
        - name: CLIENT
          enum: [go, js]
    cmds:
      - echo "Building {{.CLIENT}} client"
      - task: delete-client
        vars:
          CLIENT: '{{.CLIENT}}'
      - task: clone-client
        vars:
          CLIENT: '{{.CLIENT}}'
      - task: build-client-{{.CLIENT}}

  delete-client:
    internal: true
    desc: "Delete client source folder"
    cmds:
      - rm -rf crypto-broker-client-{{.CLIENT}}

  clone-client:
    internal: true
    desc: "Clone client repository"
    cmds:
      - git clone https://github.com/open-crypto-broker/crypto-broker-client-{{.CLIENT}}.git
      # initialize protobuf submodule
      #- |
      #  cd crypto-broker-client-{{.CLIENT}}/protobuf
      #  git submodule update --init

  build-client-go:
    internal: true
    dir: crypto-broker-client-go/cli
    cmds:
      - go build -o ./bin/go-client-cli cmd/test-app/test-app.go

  build-client-js:
    internal: true
    dir: crypto-broker-client-js/
    cmds:
      - npm install

  ################# Build Crypto Broker Server ####################
  build-crypto-broker-server:
    desc: "Clone and build Crypto Broker server"
    cmds:
      - task: delete-crypto-broker-server
      - task: clone-crypto-broker-server
      - task: build-crypto-broker-server-internal

  delete-crypto-broker-server:
    desc: "Delete Crypto Broker server source folder"
    cmds:
      - rm -rf crypto-broker-server

  clone-crypto-broker-server:
    cmds:
      - git clone https://github.com/open-crypto-broker/crypto-broker-server.git
      - task: init-protobuf-crypto-broker-server

  init-protobuf-crypto-broker-server:
    internal: true
    dir: crypto-broker-server/protobuf
    cmds:
      - git submodule update --init

  build-crypto-broker-server-internal:
    internal: true
    status:
      - test -d crypto-broker-server
    dir: crypto-broker-server
    cmds:
      - go build -o bin/cryptobroker-server cmd/server/server.go

  ################# Cleanup Tasks ####################
  delete-cloned-repos:
    desc: "Delete the cloned Crypto Broker server and the cloned client repositories"
    vars:
      ref: .CLIENTS
    cmds:
      - task: delete-crypto-broker-server
      - for: { var: CLIENTS }
        task: delete-client
        vars:
          CLIENT: '{{.ITEM}}'

  delete-client-deployment-folder:
    desc: "Delete the client deployment folder for Cloud Foundry specified with CLIENT='', values are 'go', 'js'"
    requires:
      vars:
        - name: CLIENT
          enum: [go, js]
    cmds:
      - rm -rf deployments/cloud-foundry/{{.CLIENT}}/{{.CLIENT}}-deployment

  delete-cloned-repos-deployment:
    desc: "Delete the cloned repositories, the deployment folders, and also the deployment on Cloud Foundry"
    aliases: [delete-all]
    vars:
      ref: .CLIENTS
    cmds:
      - task: delete-cloned-repos
      - for: { var: CLIENTS }
        task: delete-client-deployment-folder
        vars:
          CLIENT: '{{.ITEM}}'
      - for: { var: CLIENTS }
        cmd:
          cf delete -r -f crypto-broker-{{.ITEM}}-client

  ################# End-to-End Tests ####################
  build-dependencies:
    desc: "Build all dependencies: clients and server"
    internal: true
    deps: [build-crypto-broker-server]
    vars:
      ref: .CLIENTS
    cmds:
      - for: { var: CLIENTS }
        task: build-client
        vars:
          CLIENT: '{{.ITEM}}'

  # Start/Stop Crypto Broker server
  start-crypto-broker-server:
    desc: "Start the Crypto Broker Server with a custom test profile"
    internal: true
    cmds:
      - CRYPTO_BROKER_PROFILES_DIR=$PWD/testing/profiles ./crypto-broker-server/bin/cryptobroker-server &

  stop-crypto-broker-server:
    desc: "Stop the Crypto Broker Server after all tests were executed"
    internal: true
    cmds:
      - kill $(ps -e | awk '/cryptobroker/ {print $1}')

  # Hashing tests from the clients
  test-hashing-clients:
    desc: "Iterate hashing tests over all clients"
    internal: true
    vars:
      ref: .CLIENTS_PATH
    cmds:
      - for: { var: CLIENTS_PATH }
        task: test-hashing-KATs
        vars:
          CLIENT_PATH: '{{.ITEM}}'

  test-hashing-KATs:
    desc: "Iterate over all hashing KATs"
    internal: true
    vars:
      ref: .KAT
    cmds:
      - for: { var: KAT }
        cmd:
          |
          echo "Test {{.KEY}}"
          HASH_RESPONSE=$({{.CLIENT_PATH}} --profile={{.KEY}} hash "Welcome CryptoBroker" | grep -oP '\"hashValue\":\s?"\K[^"]+')
          if [[ $HASH_RESPONSE != {{.ITEM}} ]] then
            echo "Error: Hash values do not match!"
            exit 1
          fi

  # Sign certificate tests from the clients
  test-sign-certificate-clients:
    desc: "Iterate signing tests over all clients"
    internal: true
    vars:
      ref: .CLIENTS_PATH
    cmds:
      - for: { var: CLIENTS_PATH }
        task: test-sign-certificate
        vars:
          CLIENT_PATH: '{{.ITEM}}'
      - for: { var: CLIENTS_PATH }
        task: test-sign-certificate-validity
        vars:
          CLIENT_PATH: '{{.ITEM}}'

  test-sign-certificate:
    desc: "Iterate over ECDSA/RSA with SHA2 algorithms"
    internal: true
    cmds:
      - for:
          matrix:
            SIGN_ALGO:
              ref: .SIGN_ALGO
            HASH_ALGO:
              ref: .HASH_ALGO
        cmd:
          |
          echo "Test {{.ITEM.SIGN_ALGO}}-{{.ITEM.HASH_ALGO}}"
          mkdir -p tmp/certificate-responses/{{.ITEM.SIGN_ALGO}}-{{.ITEM.HASH_ALGO}}
          SIGNED_CERTIFICATE=$({{.CLIENT_PATH}} --profile=sign-certificate-{{.ITEM.SIGN_ALGO}}-{{.ITEM.HASH_ALGO}} sign testing/certificates/test-csr/ecdsa_256.csr testing/certificates/test-ca/root-CA-{{.ITEM.SIGN_ALGO}}.pem testing/certificates/test-ca/root-CA-{{.ITEM.SIGN_ALGO}}-private-key.pem | grep -oP '\"signedCertificate\":\s?"\K[^"]+')
          printf "-----BEGIN CERTIFICATE-----\n$SIGNED_CERTIFICATE\n-----END CERTIFICATE-----\n" > tmp/certificate-responses/{{.ITEM.SIGN_ALGO}}-{{.ITEM.HASH_ALGO}}/tmp-cert-response-{{.ITEM.SIGN_ALGO}}-{{.ITEM.HASH_ALGO}}.pem
          openssl x509 -inform PEM -in tmp/certificate-responses/{{.ITEM.SIGN_ALGO}}-{{.ITEM.HASH_ALGO}}/tmp-cert-response-{{.ITEM.SIGN_ALGO}}-{{.ITEM.HASH_ALGO}}.pem -text
          rm -rf tmp/

  test-sign-certificate-validity:
    desc: "Test profile with different validities"
    internal: true
    cmds:
      - |
        echo "Test different validities"
        mkdir -p tmp/certificate-responses/validities
        SIGNED_CERTIFICATE=$({{.CLIENT_PATH}} --profile=sign-certificate-validities sign testing/certificates/test-csr/ecdsa_256.csr testing/certificates/test-ca/root-CA-ecdsa.pem testing/certificates/test-ca/root-CA-ecdsa-private-key.pem | grep -oP '\"signedCertificate\":\s?"\K[^"]+')
        printf "-----BEGIN CERTIFICATE-----\n$SIGNED_CERTIFICATE\n-----END CERTIFICATE-----\n" > tmp/certificate-responses/validities/tmp-cert-response-validity.pem
        openssl x509 -inform PEM -in tmp/certificate-responses/validities/tmp-cert-response-validity.pem -text
        rm -rf tmp/

  # Public tasks for testing
  test-hash-clients:
    desc: "Build, run and perform hashing tests for all clients"
    cmds:
      - task: build-dependencies
      - task: start-crypto-broker-server
      - defer: { task: stop-crypto-broker-server }
      - task: test-hashing-clients

  test-sign-clients:
    desc: "Build, run and perform signing tests for all clients"
    cmds:
      - task: build-dependencies
      - task: start-crypto-broker-server
      - defer: { task: stop-crypto-broker-server }
      - task: test-sign-certificate-clients

  test-clients:
    desc: "Combine all tests for all clients in one task"
    cmds:
      - task: build-dependencies
      - task: start-crypto-broker-server
      - defer: { task: stop-crypto-broker-server }
      - task: test-hashing-clients
      - task: test-sign-certificate-clients

  ################# Cloud Foundry Deployment ####################
  deploy-cf-cryptobroker:
    desc: "Deploy to Cloud Foundry the Crypto Broker server and client specified with CLIENT='', values are 'go', 'js'"
    deps: [build-crypto-broker-server]
    requires:
      vars:
        - name: CLIENT
          enum: [go, js]
    cmds:
      - task: delete-client-deployment-folder
        vars:
          CLIENT: '{{.CLIENT}}'
      - task: build-client
        vars:
          CLIENT: '{{.CLIENT}}'
      - task: create-deployment-folder
        vars:
          CLIENT: '{{.CLIENT}}'
      - task: copy-crypto-broker-server
        vars:
          CLIENT: '{{.CLIENT}}'
      - task: copy-{{.CLIENT}}-client
      - cf push --random-route -f deployments/cloud-foundry/{{.CLIENT}}/manifest.yaml -p deployments/cloud-foundry/{{.CLIENT}}/{{.CLIENT}}-deployment/

  create-deployment-folder:
    desc: "Create the deployment folder"
    internal: true
    cmds:
      - mkdir deployments/cloud-foundry/{{.CLIENT}}/{{.CLIENT}}-deployment

  copy-crypto-broker-server:
    desc: "Copy Crypto Broker server files to deployment folder"
    internal: true
    cmds:
      - cp crypto-broker-server/bin/cryptobroker-server deployments/cloud-foundry/{{.CLIENT}}/{{.CLIENT}}-deployment/
      - cp testing/profiles/Profiles.yaml deployments/cloud-foundry/{{.CLIENT}}/{{.CLIENT}}-deployment/

  # Go specific task
  copy-go-client:
    desc: "Copy the necessary Go client files for Cloud Foundry deployment"
    internal: true
    cmds:
      - cp crypto-broker-client-go/cli/bin/go-client-cli deployments/cloud-foundry/go/go-deployment

  # Node.js specific tasks
  copy-js-client:
    desc: "Copy the necessary Node.js client files for Cloud Foundry deployment"
    internal: true
    cmds:
      - cp crypto-broker-client-js/package*.json deployments/cloud-foundry/js/js-deployment/
      - cp -r crypto-broker-client-js/dist/ deployments/cloud-foundry/js/js-deployment/
      - task: init-node-modules

  init-node-modules:
    internal: true
    dir: deployments/cloud-foundry/js/js-deployment
    cmds:
      - npm ci --omit=dev --ignore-scripts

  ################# Kubernetes Deployment ####################
  kube-deploy:
    desc: "Deploys the Kubernetes Crypto Broker. It requires a .env local file with the repository's credentials"
    aliases: [deploy]
    dotenv: ['.env']
    preconditions:
      - test -f .env
    cmds:
      - helm upgrade --install broker ./deployments/k8s/kube-broker/ --namespace crypto-broker --create-namespace --force --set imageCredentials.username=$DOCKER_USERNAME --set imageCredentials.password=$DOCKER_PASSWORD --set imageCredentials.email=$DOCKER_EMAIL

  kube-destroy:
    desc: "Destroys the Kubernetes Crypto Broker deployment"
    dotenv: ['.env']
    aliases: [destroy]
    cmds:
      - helm uninstall broker -n crypto-broker
